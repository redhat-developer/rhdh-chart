{{- if and .Values.openshiftGitops.enabled }}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csv-cleanup-gitops
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csv-cleanup-role-gitops
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "delete"]
  - apiGroups: ["operators.coreos.com"]
    resources: ["clusterserviceversions", "subscriptions"]
    verbs: ["get", "list", "delete", "watch"]
  - apiGroups: ["apps", ""]
    resources: ["deployments", "pods"]
    verbs: ["get", "list", "delete"]
  - apiGroups: [""]
    resources: ["pods", "services", "namespaces"]
    verbs: ["get", "list", "delete"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "delete"]
  - apiGroups: ["argoproj.io"]
    resources: ["applications", "appprojects", "argocds", "argocd"]
    verbs: ["get", "list", "watch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csv-cleanup-rolebinding-gitops
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csv-cleanup-role-gitops
subjects:
- kind: ServiceAccount
  name: csv-cleanup-gitops
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: openshift-gitops-cleanup-gitops
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
spec:
  template:
    spec:
      serviceAccountName: csv-cleanup-gitops
      restartPolicy: Never
      containers:
      - name: cleanup
        image: {{ .Values.cleanupContainerImage }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}
        env:
          - name: NAMESPACE
            value: {{ .Values.openshiftGitops.subscription.namespace }}
          - name: NAME
            value: {{ .Values.openshiftGitops.subscription.spec.name }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/sh
        - -c
        - |
          set +e # Continue on error

          echo "Starting OpenShift GitOps Cleanup Job..."

          # --- Phase 1: Delete OpenShift GitOps Operator Subscription FIRST ---
          echo "Phase 1: Deleting OpenShift GitOps Operator Subscription to stop operator reconciliation..."
          
          echo "Attempting to delete Subscription $NAME in $NAMESPACE..."
          kubectl delete subscription $NAME -n $NAMESPACE --ignore-not-found
          echo "Waiting for Subscription to be deleted (timeout 90s)..."
          kubectl wait --for=delete subscription/$NAME -n $NAMESPACE --timeout=90s || echo "Subscription deletion timed out or resource not found, continuing..."
          
          # Give the operator time to stop reconciling
          echo "Waiting 10 seconds for operator to stop reconciling..."
          sleep 10
          
          echo "Phase 1: Subscription deletion complete."
          echo ""

          # --- Phase 2: Delete all Applications ---
          echo "Phase 2: Deleting all Application resources across all namespaces..."
          
          # Get unique list of namespaces that contain Applications
          namespaces_with_apps=$(kubectl get applications.argoproj.io -A -o custom-columns="NAMESPACE:.metadata.namespace" --no-headers 2>/dev/null | sort -u)

          if [ -z "$namespaces_with_apps" ]; then
            echo "No Application resources found. Skipping Application deletion."
          else
            echo "$namespaces_with_apps" | while read -r ns; do
              echo "  Processing namespace: $ns for Applications"
              # Get all Applications in the current namespace
              applications_in_ns=$(kubectl get applications.argoproj.io -n "$ns" -o custom-columns="NAME:.metadata.name" --no-headers 2>/dev/null)

              if [ -z "$applications_in_ns" ]; then
                echo "    No Applications found in $ns."
              else
                echo "$applications_in_ns" | while read -r app; do
                  if [ -n "$app" ]; then
                    echo "    Deleting Application: $app in namespace: $ns"
                    kubectl delete applications.argoproj.io "$app" -n "$ns" --ignore-not-found
                  fi
                done
              fi
            done
          fi
          echo "Phase 2: Application deletion complete."
          echo ""

          # --- Phase 3: Delete all AppProjects ---
          echo "Phase 3: Deleting all AppProject resources across all namespaces..."
          
          # Get unique list of namespaces that contain AppProjects
          namespaces_with_appprojects=$(kubectl get appprojects.argoproj.io -A -o custom-columns="NAMESPACE:.metadata.namespace" --no-headers 2>/dev/null | sort -u)

          if [ -z "$namespaces_with_appprojects" ]; then
            echo "No AppProject resources found. Skipping AppProject deletion."
          else
            echo "$namespaces_with_appprojects" | while read -r ns; do
              echo "  Processing namespace: $ns for AppProjects"
              # Get all AppProjects in the current namespace
              appprojects_in_ns=$(kubectl get appprojects.argoproj.io -n "$ns" -o custom-columns="NAME:.metadata.name" --no-headers 2>/dev/null)

              if [ -z "$appprojects_in_ns" ]; then
                echo "    No AppProjects found in $ns."
              else
                echo "$appprojects_in_ns" | while read -r proj; do
                  if [ -n "$proj" ]; then
                    echo "    Deleting AppProject: $proj in namespace: $ns"
                    kubectl delete appprojects.argoproj.io "$proj" -n "$ns" --ignore-not-found
                  fi
                done
              fi
            done
          fi
          echo "Phase 3: AppProject deletion complete."
          echo ""

          # --- Phase 4: Delete all ArgoCD instances ---
          echo "Phase 4: Deleting all ArgoCD instances across all namespaces..."

          # Get a list of all ArgoCD instances (namespace and name) once
          argo_instances=$(kubectl get argocd -A -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name" --no-headers 2>/dev/null)

          if [ -z "$argo_instances" ]; then
            echo "No ArgoCD instances found. Skipping ArgoCD instance deletion."
          else
            echo "$argo_instances" | while read -r ns argo_name; do
              if [ -n "$ns" ] && [ -n "$argo_name" ]; then
                echo "  Attempting to delete ArgoCD instance '$argo_name' in namespace: $ns"
                # First, try a regular delete. If it gets stuck (due to finalizers),
                # we will attempt to patch.
                kubectl delete argocd "$argo_name" -n "$ns" --ignore-not-found --timeout=30s
                
                # Check if the ArgoCD instance is still present (meaning it's stuck with a finalizer)
                if kubectl get argocd "$argo_name" -n "$ns" &>/dev/null; then
                  echo "  ArgoCD instance '$argo_name' in namespace '$ns' is stuck. Attempting to remove finalizers."
                  # Patch the resource to remove finalizers
                  kubectl patch argocd "$argo_name" -n "$ns" --type=json -p='[{"op": "remove", "path": "/metadata/finalizers"}]' || \
                    echo "    Warning: Failed to patch finalizers for $argo_name in $ns. It might remain."
                  echo "  Re-attempting delete for ArgoCD instance '$argo_name' in namespace: $ns after finalizer removal."
                  kubectl delete argocd "$argo_name" -n "$ns" --ignore-not-found --timeout=30s
                fi
              fi
            done
          fi
          echo "Phase 4: ArgoCD instance deletion complete."
          echo ""

          # --- Phase 5: Delete ClusterServiceVersion (CSV) ---
          echo "Phase 5: Deleting ClusterServiceVersion (CSV) for $NAME in $NAMESPACE..."
          
          # Find CSVs that match the operator name pattern
          csv_names=$(kubectl get csv -n $NAMESPACE -o name | grep -E "(gitops|argocd)" 2>/dev/null || echo "")
          
          if [ -z "$csv_names" ]; then
            echo "No GitOps/ArgoCD CSVs found in $NAMESPACE."
          else
            echo "$csv_names" | while read -r csv_name; do
              if [ -n "$csv_name" ]; then
                echo "  Deleting CSV: $csv_name"
                kubectl delete "$csv_name" -n $NAMESPACE --ignore-not-found
              fi
            done
          fi
          
          echo "Waiting for CSV to be deleted (timeout 120s)..."
          kubectl wait --for=delete csv -l operators.coreos.com/$NAME.$NAMESPACE='' -n $NAMESPACE --timeout=120s 2>/dev/null || echo "CSV deletion wait timed out or resource not found, continuing..."

          echo "Phase 5: CSV deletion complete."
          echo ""

          echo "OpenShift GitOps cleanup job finished successfully."
        
{{- end }}
